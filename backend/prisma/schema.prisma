// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(uuid())
  email String  @unique
  password String
  name  String
  workspaces Member[]
  aIInteractions AIInteraction[]
  comments Comment[]
  collabSessions CollabSession[] @relation("UserToCollabSession")
}

model Workspace {
  id        String   @id @default(uuid())
  name      String
  members   Member[]
  projects  Project[]
}

model Member {
  id          String @id @default(uuid())
  userId      String
  workspaceId String
  role        String
  user        User     @relation(fields: [userId], references: [id])
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])
  @@unique([userId, workspaceId])
}

model Project {
  id          String @id @default(uuid())
  name        String
  workspaceId String
  schemas     Schema[]
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])
}

model Schema {
  id        String    @id @default(uuid())
  name      String
  projectId String
  tables    Table[]
  versions  SchemaVersion[]
  project   Project  @relation(fields: [projectId], references: [id])
  aiInteractions AIInteraction[]
  sessions CollabSession[]
}

model Table {
  id        String    @id @default(uuid())
  name      String
  schemaId  String
  positionX Int
  positionY Int
  columns   Column[]
  schema    Schema   @relation(fields: [schemaId], references: [id])
  outgoingRelations Relationship[] @relation("TableToRelationship")
  incomingRelations Relationship[] @relation("RelationshipToTable")
  comments Comment[]
}

model Column {
  id         String   @id @default(uuid())
  name       String
  type       String
  isPrimary  Boolean  @default(false)
  isNullable Boolean  @default(false)
  isUnique   Boolean  @default(false)
  defaultValue String?
  tableId    String
  table      Table    @relation(fields: [tableId], references: [id])
}

model Relationship {
  id          String @id @default(uuid())
  fromTableId String
  toTableId   String
  fromColumn  String
  toColumn    String
  type        String
  fromTable   Table  @relation("TableToRelationship", fields: [fromTableId], references: [id])
  toTable     Table  @relation("RelationshipToTable", fields: [toTableId], references: [id])
}

model SchemaVersion{
  id String @id @default(uuid())
  schemaId String
  snapshotJson String
  schema Schema @relation(fields: [schemaId], references: [id])
}

model AIInteraction {
  id String @id @default(uuid())
  schemaId String
  userId String
  prompt String
  response String
  schema Schema @relation(fields: [schemaId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model CollabSession{
  id String @id @default(uuid())
  schemaId String
  userId String //creator
  joinedAt DateTime?
  lastActive DateTime
  users User[] @relation("UserToCollabSession")
  cursors CursorPosition[]
  schema Schema @relation(fields: [schemaId], references: [id])
}

model CursorPosition{
  id String @id @default(uuid())
  sessionId String
  x Int
  y Int
  color String
  updatedAt DateTime
  session CollabSession @relation(fields: [sessionId], references: [id])
}

model Comment {
  id String @id @default(uuid())
  tableId String
  userId String
  content String
  createdAt DateTime @default(now())
  table Table @relation(fields: [tableId], references: [id])
  user User @relation(fields: [userId], references: [id])
}
